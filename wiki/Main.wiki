=FST - Fast Serialization Thingy=

==Quick Start==

Plain {{{ObjectOutputStrem}}} Replacement Usage (Single Threaded)

{{{
...
// ! reuse this Object, it caches metadata. Performance degrades massively
if you create a new Configuration Object with each serialization !
static FSTConfiguration conf = FSTConfiguration.createDefaultConfiguration();
...
public MyClass myreadMethod( InputStream stream ) {
    FSTObjectInput in = new FSTObjectInput(stream,conf);
    MyClass result = (MyClass)in.readObject();
    in.close();
    return result;
}

public void mywriteMethod( OutputStream stream, MyClass toWrite ) {
    FSTObjectOutput out = new FSTObjectOutput(stream,conf);
    out.writeObject( toWrite );
    out.close();
}
}}}

or better if you know the type of the Object (saves some bytes for the class name):
{{{
...
// ! reuse this Object, it caches metadata. Performance degrades massively
if you create a new Configuration Object with each serialization !
static FSTConfiguration conf = FSTConfiguration.createDefaultConfiguration();
...
public MyClass myreadMethod() {
    FSTObjectInput in = new FSTObjectInput(conf);
    MyClass result = in.readObject(MyObject.class);
    in.close();
    return result;
}

public void mywriteMethod( MyClass toWrite ) {
    FSTObjectOutput out = new FSTObjectOutput(conf);
    out.writeObject( toWrite, toWrite.getClass() );
}
}}}
Note that if you write with a type, you also have to read with a type !